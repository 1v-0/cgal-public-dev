#!/bin/sh
#
# A hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.

#-----------------------------------------------------------------------------
# Config
# ------
# hooks.allownonascii
#    This boolean sets whether non-ascii filenames will be allowed into
#    to the repository.
allownonascii=$(git config hooks.allownonascii)
# hooks.allowcaseonly
#    This boolean sets whether you want to allow filenames to only 
#    differ in case.
allowcaseonly=$(git config hooks.allowcaseonly)
# hooks.allowsymlink
#    This boolean sets whether you want to allow symlinks.
allowsymlinks=$(git config hooks.allowsymlinks)
# hooks.allowdotsvn
#    This boolean sets whether .svn subdir are allowed to be added
#    to the repository.
allowdotsvn=$(git config hooks.allowdotsvn)

#-----------------------------------------------------------------------------
# Redirect output to stderr.
exec 1>&2

#-----------------------------------------------------------------------------
die() {
        echo 'pre-commit hook failure' 1>&2
        echo '-----------------------' 1>&2
        echo '' 1>&2
        echo "$@" 1>&2
        exit 1
}

#-----------------------------------------------------------------------------
zero='0000000000000000000000000000000000000000'

if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
	# Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

#-----------------------------------------------------------------------------
# Check for committer identity.
advice='
Use the commands

        git config --global user.name '\''Your Name'\''
        git config --global user.email '\''you@yourdomain.com'\''

to introduce yourself to Git before committing.'

# Ensure name and email are available.
git config --get user.name > /dev/null &&
git config --get user.email > /dev/null ||
die 'Identity not configured!' "$advice"

# Validate the name and email.
git config --get user.name | grep ' ' > /dev/null ||
die 'Set user.name to your Real Name (with a space), not a userid.' "$advice"
git config --get user.email | grep '^[^@]*@[^@]*$' > /dev/null ||
die 'Set user.email to an email address (userid@validdomain.com).' "$advice"

#-----------------------------------------------------------------------------
# Cross platform projects tend to avoid non-ascii filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
    test $(git diff --cached --name-only --diff-filter=A -z $against |
	LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
    echo "Error: Attempt to add a non-ascii file name."
    echo
    echo "This can cause problems if you want to work"
    echo "with people on other platforms."
    echo
    echo "To be portable it is advisable to rename the file ..."
    echo
# TODO echo filenames with problems!
    echo "If you know what you are doing check the pre-commit hook"
    echo "on how to disable this behavior."
#    echo
#    echo "  git config hooks.allownonascii true"
#    echo
    exit 1
fi

#-----------------------------------------------------------------------------
# Check that transaction will not create files/folders
# whose name differ only by case (illegal on Windows).
# check for names that already exist but only differ in case
# which can be problematic on non-casesensitive filesystems
if [ "$allowcaseonly" != "true" ] &&
    test $(git ls-files | tr [A-Z] [a-z] | sort | uniq -d | wc -c) != 0
then
    echo "Error: Attempt to add file which already exists in different case"
    echo
# TODO echo filenames with problems!
    echo "If you know what you are doing check the pre-commit hook"
    echo "on how to disable this behavior."
#    echo
#    echo "  git config hooks.allowcaseonly true"
#    echo
    exit 1
fi 

#-----------------------------------------------------------------------------
# Reject Unix symbolic links, which are not valid (in fact: ignored) on Windows.
if [ "$allowsymlinks" != "true" ] &&
    test $(git diff --name-only --cached | xargs git ls-files -s | awk '/120000/{print $4}' | wc -l) != 0
then
    echo "Error: Attempt to add a symlink."
    echo
    echo "This can cause problems if you want to work"
    echo "with people on other platforms."
# TODO echo filenames with problems!
    echo
    echo "If you know what you are doing check the pre-commit hook"
    echo "on how to disable this behavior."
#    echo
#    echo "  git config hooks.allowsymlinks true"
#    echo
    exit 1
fi

#-----------------------------------------------------------------------------
# Check that transaction will not create olders
# whose name is .svn
if [ "$allowdotsvn" != "true" ]
then
  criticalfiles=$(git ls-files | grep ".svn/")
  if test $(echo "$criticalfiles\c" | wc -w) != 0
  then
    echo "Error: Attempt to add .svn subdirectory:"
    echo
    echo $criticalfiles
    echo
    echo "If you know what you are doing check the pre-commit hook"
    echo "on how to disable this behavior."
#    echo
#    echo "  git config hooks.allowdotsvn true"
#    echo
    exit 1
  fi
fi


#-----------------------------------------------------------------------------
# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
