#!/bin/bash

# --- Command line
refname="$1"
oldrev="$(git rev-parse $2)"
newrev="$(git rev-parse $3)"
debug="$4"

if [ -z "$newrev" ] || [ -n "$debug" -a "x$debug" != "x--debug" ]; then
    if [ -n "$newrev" ]; then
        echo "The fourth argument is \"$4\"!" >&2
    fi
    echo "  Usage:" >&2
    echo "  $0 <refname> <oldrev> <newrev> [--debug]"  >&2
    exit 1
fi

shortref=$(basename "$refname")
date=$(date +%Y-%m-%d_%H%M%S)
rejected_ref="refs/rejected-push/${shortref}_${date}_${GIT_USER}"

function reject_push() {
    if [ -z "$debug" ]; then
        git update-ref "$rejected_ref" "$newrev"
        echo ""
        echo "  Ask for help on the CGAL developers mailing lists to solve"
        echo "  that issue."
        echo "  Please specify the following reference:"
        echo "    ${rejected_ref}"
        echo ""
    fi
    exit 1
}

# Special rights for a set of trusted people.
case "$GIT_USER" in
    (lrineau|sloriot|eric) exit 0;;
esac

# If the branch is not master, allow
if [ "$refname" != refs/heads/master ]; then exit 0; fi

if [ `basename "${PWD}"` = "cgal-gsoc" ]; then
    if [ -z "$IN_CGAL_POST_UPDATE_PUSH_TO_GSOC" ]; then
        echo "ERROR:"
        echo "  You cannot push to master in the cgal-gsoc repository."
        echo "  Create a new branch from your copy of master, and then run:"
        echo "    git checkout master"
        echo "    git reset --hard origin/master"
        echo "  to reset your local copy of master to the original one."
        reject_push
    fi
fi

# Forbid non-fast-forward updates to master
if ! [ "$(git merge-base "$oldrev" "$newrev")" = "$oldrev" ]; then
    echo ""
    echo "ERROR:"
    echo "  You cannot push a non fast-forward update to master in CGAL"
    echo "  git repositories!"
    reject_push
fi

# Accept minor fixes
if git show "$newrev" | grep -Eiq '(minor|trivial) +(bug(-)?)?fix.*master'; then
    if [ $(git log --oneline "$oldrev..$newrev" | wc -l) = 1 ]; then
        exit 0
    fi
fi

# Accept pushes that are said to be approved by the RM
if git show "$newrev" | grep -iEq 'App?rou?ved by the (RM|Release Manager)'; then
    exit 0
fi

# Accept modifications to Maintenance, Documentation, and */doc
if ! git diff --raw "$oldrev" "$newrev" | grep -vE '\b(Maintenance/|Documentation/|[^/]+/doc/|Installation/changes.html)'; then
    exit 0
fi

echo ""
echo "ERROR:"
echo "  You are not allowed to push the revision"
echo "  $newrev to master."
echo ""
echo "  - If your modifications are a merge of a tested feature branch"
echo "    then, according to the guidelines, you must ask the Release"
echo "    Manager for approval before pushing to master."
echo "  - If your modifications are a trivial bug fix, it seems"
echo "    the push is not trivial enough. Please try:"
echo "      git pull --rebase"
echo "      git push"
echo "    Please also check the following section in the wiki:"
echo "    http://cgal.org/wiki/Guidelines/Source_Code_Management_GIT#Bug_Fixes"
echo "  - The only other allowed pushed are modifications to the"
echo "    Doxygen documentation."
reject_push
