#!/bin/bash

# --- Command line
refname="$1"
oldrev="$(git rev-parse $2)"
newrev="$(git rev-parse $3)"
debug="$4"

if [ -z "$newrev" ] || [ -n "$debug" -a "x$debug" != "x--debug" ]; then
    if [ -n "$newrev" ]; then
        echo "The fourth argument is \"$4\"!" >&2
    fi
    echo "  Usage:" >&2
    echo "  $0 <refname> <oldrev> <newrev> [--debug]"  >&2
    exit 1
fi

shortref=$(basename "$refname")
date=$(date +%Y-%m-%d_%H%M%S)
rejected_ref="refs/rejected-push/${shortref}_${date}_${GIT_USER}"

function reject_push() {
    if [ -z "$debug" ]; then
        git update-ref "$rejected_ref" "$newrev"
        echo ""
        echo "  Ask for help on the CGAL developers mailing lists to solve"
        echo "  that issue."
        echo "  Please specify the following reference:"
        echo "    ${rejected_ref}"
        echo "###"
        echo "###  NOTE: Your push to branch $refname is REJECTED!"
        echo "###"
    fi
    exit 1
}

function may_reject_push() {
    # Special rights for a set of trusted people.
    case "$GIT_USER" in
        (lrineau|sloriot|eric)
            echo ""
            if [ "$1" != force ]; then
                echo "BUT:"
            fi
            echo "  You are in the set of TRUSTED user."
            if [ "$1" != force ]; then
                echo "  That push is EXCEPTIONNALY accepted."
                echo ""
                exit 0
            else
                echo "  BUT that issue is IMPORTANT."
                echo "  Your push will be REJECTED!"
                echo ""
                reject_push
            fi
            ;;
        (*)
            reject_push
            ;;
    esac
}

# If the branch is not master, allow
if [ "$refname" != refs/heads/master ]; then exit 0; fi

# First check for cgal-gsoc: disallow pushes to master.
if [ `basename "${PWD}"` = "cgal-gsoc" ]; then
    if [ -z "$IN_CGAL_POST_UPDATE_PUSH_TO_GSOC" ]; then
        echo "ERROR:"
        echo "  You cannot push to master in the cgal-gsoc repository."
        echo "  Create a new branch from your copy of master, and then run:"
        echo "    git checkout master"
        echo "    git reset --hard origin/master"
        echo "  to reset your local copy of master to the original one."
        may_reject_push
    fi
fi

# Forbid non-fast-forward updates to master
# That is the first check. Only trusted users can do that.
if ! [ "$(git merge-base "$oldrev" "$newrev")" = "$oldrev" ]; then
    echo ""
    echo "ERROR:"
    echo "  You cannot push a non fast-forward update to master in CGAL"
    echo "  git repositories!"
    may_reject_push
fi

# Accept minor fixes
nb_commits=$(git log --oneline "$oldrev..$newrev" | wc -l)
if git show "$newrev" | grep -Eiq '(minor|trivial) +(bug(-| +)?)?fix.*master'; then
    if [ "$nb_commits" = 1 ]; then
        echo "NOTE: push of a trivial fix is accepted in master."
        exit 0
    else
        echo "  Minor fixes to master should be restricted to one short commit."
        echo "  You are pushing ${nb_commits} commits."
        echo "  Try:"
        echo "    git pull --rebase"
        echo "  and re-push."
        echo "  If your commit is not a trivial fix, then create a branch and"
        echo "  test it in integration."
    fi
fi

# Reject merges when master is not in the left child of the merge.
if [ $(git log --oneline "$newrev^1..$oldrev" | wc -l) != 0 ]; then
    echo "ERROR:"
    echo "Your merge must have 'origin/master' as its first parent!"
    may_reject_push force
fi

# Accept modifications to Maintenance, Documentation, and */doc
if ! git diff --raw "$oldrev" "$newrev" | grep -qvE '\b(Maintenance/|Documentation/|[^/]+/doc/|Installation/changes.html)'; then
    echo "NOTE: that push is accepted because it is in the set of"
    echo "exceptions:"
    echo "  - maintenance files,"
    echo "  - documentation files,"
    echo "  - or Installation/changes.html."
    exit 0
fi

# Accept pushes that are said to be approved by the RM
if git show "$newrev" | grep -iEq 'App?rou?ved by the (RM|Release Manager)'; then
    echo "NOTE: Your push is accepted (marked as approved by the RM)."
    exit 0
fi

# The following tests if $newrev has a second parent (it would mean that is
# a merge commit).
if ! git rev-parse -q --verify "$newrev^2" > /dev/null; then
    echo "ERROR:"
    echo "  Only merges or trivial fixes (short and readable single commits)"
    echo "  can be pushed to master!"
    if [ $(git log --oneline "$oldrev..$newrev" | wc -l) = 1 ]; then
        echo ""
        echo " ADVICE: You are trying to push a single commit.  If that is"
        echo " a trivial fix, use the following command:"
        echo "    git commit --amend"
        echo "  then add \"trivial fix for master\" in the body of the"
        echo "  commit message, and then re-push."
        echo "  Otherwise, create a branch and test is in integration."
        echo ""
    fi
    may_reject_push
fi

# Fallback
echo ""
echo "ERROR:"
echo "  You are not allowed to push the revision"
echo "  $newrev to master."
echo ""
echo "  - If your modifications are a merge of a tested feature branch"
echo "    then, according to the guidelines, you must ask the Release"
echo "    Manager for approval before pushing to master."
echo "  - If your modifications are a trivial bug fix, it seems"
echo "    the push is not trivial enough. Please try:"
echo "      git pull --rebase"
echo "      git push"
echo "    Please also check the following section in the wiki:"
echo "    http://cgal.org/wiki/Guidelines/Source_Code_Management_GIT#Bug_Fixes"
echo "  - The only other allowed pushed are modifications to the"
echo "    Doxygen documentation."
may_reject_push
