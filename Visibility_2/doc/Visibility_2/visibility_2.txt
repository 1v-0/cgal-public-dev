namespace CGAL {

/*!

\mainpage 2D Visibility  
\anchor Chapter_2D_Visibility_Computation
\cgalAutoToc

\authors Michael Hemmer, Kan Huang, Francisc Bungiu

\section visibility_2_introduction Introduction

\cgalFigureBegin{example_figure,visibility-teaser.png}
An example figure. 
\cgalFigureEnd

Given a polygon \f$ P \f$(might have holes) and  two points \f$ p \f$ and \f$ q \f$ are said to be visible  iff segment joining \f$ p \f$ and \f$ q \f$  contains no point on the exterior of \f$ P \f$ . The set of points that are visible from \f$ p \f$ is defined as the visibility region of \f$ p \f$.  We refer to \f$ P \f$ as environment. 

For some practical reasons, this package provides two kinds of visibility region:
- Non-regularized : defined as above.
- Regularized : the closure of interior of non-regularized region.

Look at Figure \cgalFigureRef{definition} as an example.

  \cgalFigureBegin{definition, visibility-definition.png}
  All labelled points are collinear. Part (1) shows the non-regularized visiblity region of \f$ p \f$. Part (2) is the regularzied visibility region of \f$ p \f$ . The difference between them is segement \f$ bc \f$.
  \cgalFigureEnd

\section visibility_2_classes Classes and Algorithms

CGAL provides three class templates:
Class 		|	Function |   Algorthm and Complexity 
----------------|--------------- |---------------------------
 `Simple_visibility_2`       | compute visibility in simple polygons                        |\cite cgal:bjrb-clvpa-87, \f$ O(n) \f$ time and \f$ O(n) \f$ space
 `Naive_visibility_2`        |  compute visibility in an arbitrary arrangement of segments. |\cite cgal:ta-aeafvpprh-85, \f$ O(n\log n) \f$ time and \f$ O(n) \f$
 `Preprocessed_visibility_2` | visibility query in arbitrary arrangement of segments.       |\cite cgal:aaghi-vpsesp-85. The preprocessing needs \f$ O(n^2) \f$ time and \f$ O(n^2) \f$ space. The query time is \f$ O(n) \f$. 

where  \f$ n \f$ is the number of vertices of input polygon.

Every templates has two parameters, `Arrangement_2` and `Regularization_tag`. All classes accept an instance of `Arrangement_2` as the environment \f$ P \f$. `Regularization_tag` indicates whether the result should be regularized or not. 

Each class has two overloads of `visibility_region` functions. One is for case that query point is in the interior of environment. One is for case that query point is on the boundary of environment. The answer is an instance of `Arrangement_2` that consists of edges on the boundary of visibility region.

\section simple_visibility_example  Example of visibility in a simple polygon.
The following example shows how to obtain the visibility region in Figure \cgalFigureRef{definition}(1).
\cgalExample{Visibility_2/simple_visibility_2.cpp}

\section polygon_with_hole_example Example of visibility in a polygon with holes.

*/

}
